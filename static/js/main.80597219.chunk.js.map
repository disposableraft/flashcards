{"version":3,"sources":["Button.js","ImageCard.js","FlashCard.js","Game.js","serviceWorker.js","index.js"],"names":["Button","props","incorrectGuess","guessed","react_default","a","createElement","style","onClick","className","concat","children","ImageCard","background","image","FlashCard","advanceToNextCard","correctIndex","gameState","makeAGuess","multipleChoices","sporeLabel","sporePrintColorLabel","edibilityLabel","src_ImageCard","src_Button","taxonName","score","target","rel","href","item","rNumber","max","Math","floor","random","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAdvanceToNextCard","bind","assertThisInitialized","handleMakeAGuess","state","data","datafile","sort","Array","fill","points","startSliceAt","find","i","index","addPoint","setState","boolean","haveTheyGuessed","_this$state","slice","src_FlashCard","assign","calculateScore","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAgBeA,MAdf,SAAgBC,GACd,IAAMC,EAAiBD,EAAME,QAAU,aAAe,cAEtD,OACEC,EAAAC,EAAAC,cAAA,UACEC,MAAON,EAAMM,MACbC,QAASP,EAAMO,QACfC,UAAS,OAAAC,OAASR,IAEjBD,EAAMU,WCKEC,MAdf,SAAmBX,GACjB,IAAMM,EAAQ,CACZM,WAAU,wBAAAH,OAA0BT,EAAMa,MAAhC,oCAGZ,OACEV,EAAAC,EAAAC,cAAA,OACEC,MAAOA,EACPE,UAAU,cACTR,EAAMU,WCkDEI,MAzDf,SAAmBd,GAAO,IAEtBe,EAMEf,EANFe,kBACAC,EAKEhB,EALFgB,aACAC,EAIEjB,EAJFiB,UACAf,EAGEF,EAHFE,QACAgB,EAEElB,EAFFkB,WACAC,EACEnB,EADFmB,gBAGIC,EAAaD,EAAgBH,GAAcK,sBAAwB,eACnEC,EAAiBH,EAAgBH,GAAcM,gBAAkB,eAEvE,OAAQL,GACN,IAAK,UACH,OACEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACbL,EAAAC,EAAAC,cAACkB,EAAD,CAAWV,MAAOM,EAAgBH,GAAcH,SAElDV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,cAASe,IACzBjB,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,cAASiB,KAEzBnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACbL,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACmB,EAAD,CAAQtB,QAASA,EAAQ,GAAIK,QAAS,kBAAMW,EAAW,KAAKC,EAAgB,GAAGM,YAClFtB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACmB,EAAD,CAAQtB,QAASA,EAAQ,GAAIK,QAAS,kBAAMW,EAAW,KAAKC,EAAgB,GAAGM,YAClFtB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACmB,EAAD,CAAQtB,QAASA,EAAQ,GAAIK,QAAS,kBAAMW,EAAW,KAAKC,EAAgB,GAAGM,eAK5F,IAAK,OACH,OACEtB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACbL,EAAAC,EAAAC,cAACkB,EAAD,CAAWV,MAAOM,EAAgBH,GAAcH,SAElDV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,oBAAYL,EAAM0B,OAClBvB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGsB,OAAO,SAASC,IAAI,sBAAsBC,KAAMV,EAAgBH,GAAcc,MAAOX,EAAgBH,GAAcS,YAExHtB,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,cAASe,IACzBjB,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,cAASiB,IACvBnB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACmB,EAAD,CAAQjB,QAAS,kBAAMQ,MAAvB,2BC/CXgB,EAAU,SAACC,GAAD,OAASC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,SAmFhDI,cA5Eb,SAAAA,EAAYpC,GAAO,IAAAqC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxC,KACD4C,wBAA0BP,EAAKO,wBAAwBC,KAA7BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC/BA,EAAKU,iBAAmBV,EAAKU,iBAAiBF,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IACxBA,EAAKW,MAAQ,CACXhC,aAAce,EAAQ,GACtBkB,KAVGC,EAASC,KAAK,kBAAMlB,KAAKE,SAAW,KAWvClB,UAAW,UACXf,QAASkD,MAAM,GAAGC,MAAK,GACvBC,OAAQ,EACRC,aAAc,GAVClB,iFAejB,OAAOG,KAAKQ,MAAM9C,QAAQsD,KAAK,SAAAC,GAC7B,OAAa,IAANA,6CAIMC,GACOA,IAAUlB,KAAKQ,MAAMhC,aAEzCwB,KAAKmB,WAELnB,KAAKoB,SAAS,SAAAZ,GAEZ,OADAA,EAAM9C,QAAQwD,IAAS,EAChBV,sDAMXR,KAAKoB,SAAS,SAAAZ,GACZ,MAAO,CACLO,aAAcP,EAAMO,aAAe,EACnCvC,aAAce,EAAQ,GACtBd,UAAW,UACXf,QAASkD,MAAM,GAAGC,MAAK,yCAM3B,IAAMQ,EAAUrB,KAAKsB,kBACrBtB,KAAKoB,SAAS,SAAAZ,GACZ,MAAO,CACL/B,UAAW,OACXqC,OAAQO,EAAUb,EAAMM,OAAUN,EAAMM,OAAS,8CAMrD,SAAA7C,OAAU+B,KAAKQ,MAAMM,OAArB,OAAA7C,OAAkC+B,KAAKQ,MAAMO,aAAe,EAAK,oCAG1D,IAAAQ,EACwBvB,KAAKQ,MAA5BC,EADDc,EACCd,KAAMM,EADPQ,EACOR,aAERpC,EAAkB8B,EAAKe,MAAMT,EAAcA,EAAe,GAEhE,OACEpD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAC4D,EAAD3B,OAAA4B,OAAA,CACEnD,kBAAmByB,KAAKI,wBACxB1B,WAAYsB,KAAKO,iBACjB5B,gBAAiBA,EACjBO,MAAOc,KAAK2B,kBACR3B,KAAKQ,gBAtEAoB,IAAMC,WCELC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80597219.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Button(props) {\n  const incorrectGuess = props.guessed ? 'btn-danger' : 'btn-default';\n\n  return (\n    <button\n      style={props.style}\n      onClick={props.onClick}\n      className={`btn ${incorrectGuess}`}\n      >\n      {props.children}\n    </button>\n  );\n}\n\nexport default Button;","import React from 'react';\n\nfunction ImageCard(props) {\n  const style = {\n    background: `center / contain url(${props.image}?width=500), url('./mario.gif')`,\n  };\n\n  return (\n    <div\n      style={style}\n      className=\"imageCard \">\n      {props.children}\n    </div>\n  );\n}\n\nexport default ImageCard;","import React from 'react';\nimport Button from './Button';\nimport ImageCard from './ImageCard';\n\nfunction FlashCard(props) {\n  const {\n    advanceToNextCard,\n    correctIndex,\n    gameState,\n    guessed,\n    makeAGuess,\n    multipleChoices,\n  } = props;\n\n  const sporeLabel = multipleChoices[correctIndex].sporePrintColorLabel || 'not included';\n  const edibilityLabel = multipleChoices[correctIndex].edibilityLabel || 'not included';\n\n  switch (gameState) {\n    case 'playing':\n      return (\n        <div className='flashCard playing'>\n          <div className='col-xs-12 col-md-8'>\n            <ImageCard image={multipleChoices[correctIndex].image} />\n          </div>\n          <div className='col-xs-12 col-md-4'>\n            <div className='dataCard'>\n              <p>Spore color: <strong>{sporeLabel}</strong></p>\n              <p>Edibility: <strong>{edibilityLabel}</strong></p>\n            </div>\n            <div className='multipleChoices'>\n              <p><Button guessed={guessed[0]} onClick={() => makeAGuess(0)}>{multipleChoices[0].taxonName}</Button></p>\n              <p><Button guessed={guessed[1]} onClick={() => makeAGuess(1)}>{multipleChoices[1].taxonName}</Button></p>\n              <p><Button guessed={guessed[2]} onClick={() => makeAGuess(2)}>{multipleChoices[2].taxonName}</Button></p>\n            </div>\n          </div>\n        </div>\n      );\n    case 'next':\n      return (\n        <div className='flashCard next'>\n          <div className='col-xs-12 col-md-8'>\n            <ImageCard image={multipleChoices[correctIndex].image} />\n          </div>\n          <div className='col-xs-12 col-md-4'>\n            <div className='dataCard'>\n              <h4>Score: {props.score}</h4>\n              <h4>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={multipleChoices[correctIndex].item}>{multipleChoices[correctIndex].taxonName}</a>\n              </h4>\n              <p>Spore color: <strong>{sporeLabel}</strong></p>\n              <p>Edibility: <strong>{edibilityLabel}</strong></p>\n              <p><Button onClick={() => advanceToNextCard()} >Go to Next</Button></p>\n            </div>\n          </div>\n        </div>\n      );\n    default:\n      break;\n  }\n}\n\nexport default FlashCard;","import React from 'react';\nimport FlashCard from './FlashCard';\nimport datafile from './data.json';\n\nconst rNumber = (max) => Math.floor(Math.random() * Math.floor(max));\n\nfunction getData() {\n  return datafile.sort(() => Math.random() - 0.5);\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleAdvanceToNextCard = this.handleAdvanceToNextCard.bind(this);\n    this.handleMakeAGuess = this.handleMakeAGuess.bind(this);\n    this.state = {\n      correctIndex: rNumber(3),\n      data: getData(),\n      gameState: 'playing',\n      guessed: Array(3).fill(false),\n      points: 0,\n      startSliceAt: 0,\n    }\n  }\n\n  haveTheyGuessed() {\n    return this.state.guessed.find(i => {\n      return i === true;\n    });\n  }\n\n  handleMakeAGuess(index) {\n    const winningAnswer = index === this.state.correctIndex;\n    if (winningAnswer) {\n      this.addPoint();\n    } else {\n      this.setState(state => {\n        state.guessed[index] = true;\n        return state;\n      });\n    }\n  }\n\n  handleAdvanceToNextCard() {\n    this.setState(state => {\n      return {\n        startSliceAt: state.startSliceAt + 3,\n        correctIndex: rNumber(3),\n        gameState: 'playing',\n        guessed: Array(3).fill(false),\n      };\n    });\n  }\n\n  addPoint() {\n    const boolean = this.haveTheyGuessed()\n    this.setState(state => {\n      return {\n        gameState: 'next',\n        points: boolean ? state.points : (state.points + 1),\n      };\n    });\n  }\n\n  calculateScore() {\n    return `${this.state.points} / ${(this.state.startSliceAt / 3) + 1}`;\n  }\n\n  render() {\n    const { data, startSliceAt } = this.state;\n\n    const multipleChoices = data.slice(startSliceAt, startSliceAt + 3);\n\n    return (\n      <div className='Game'>\n        <FlashCard\n          advanceToNextCard={this.handleAdvanceToNextCard}\n          makeAGuess={this.handleMakeAGuess}\n          multipleChoices={multipleChoices}\n          score={this.calculateScore()}\n          {...this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}