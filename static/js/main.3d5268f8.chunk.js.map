{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NewGameCard","props","react_default","a","createElement","dist","px","src","process","onClick","WinningCard","multipleChoices","name","flashcard","find","choice","correct","image","as","isLastCard","FlashCard","card","renderChoice","i","guessed","guesses","ChoiceButton","guessIsIncorrect","backgroundColor","fontSize","style","GameWrapper","width","p","borderRadius","boxShadow","children","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleGuess","bind","assertThisInitialized","handleNewCard","state","resetGuesses","action","advanceToNextCard","setState","_this2","_isWinning","gameScreen","React","Component","Array","fill","App","_this3","handleAdvanceToNextCard","currentCard","NaN","isNaN","length","App_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAUA,SAASA,EAAYC,GACnB,OACEC,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKC,GAAI,GACPJ,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOE,IAAMC,gCACbN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQI,QAAS,kBAAMR,EAAMQ,YAA7B,UAKN,SAASC,EAAYT,GACnB,IAyKkBU,EAzKZC,GAyKYD,EAzKMV,EAAMY,UAAUF,gBA0KjCA,EAAgBG,KAAK,SAAAC,GAC1B,OAAOA,EAAOC,WA3KyCJ,KAUzD,OACEV,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKC,GAAI,GACPJ,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOE,IAAKN,EAAMY,UAAUI,QAC5Bf,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASa,GAAG,MAAZ,YACAhB,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACEH,EAAAC,EAAAC,cAAA,+BAAsBF,EAAAC,EAAAC,cAAA,cAASQ,KAZ/BX,EAAMkB,WACDjB,EAAAC,EAAAC,cAAA,mCAEAF,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQI,QAAS,kBAAMR,EAAMQ,YAA7B,SAgBb,SAASW,EAAUnB,GACjB,OACEC,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKC,GAAI,GACPJ,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOE,IAAKN,EAAMoB,KAAKJ,QACvBf,EAAAC,EAAAC,cAAA,WAAMkB,EAAa,IACnBpB,EAAAC,EAAAC,cAAA,WAAMkB,EAAa,IACnBpB,EAAAC,EAAAC,cAAA,WAAMkB,EAAa,KAIvB,SAASA,EAAaC,GACpB,IAAMC,EAAUvB,EAAMwB,QAAQF,GAC9B,OACErB,EAAAC,EAAAC,cAACsB,EAAD,CACEX,OAAQd,EAAMoB,KAAKV,gBAAgBY,GACnCd,QAAS,kBAAMR,EAAMQ,QAAQc,IAC7BI,iBAAkBH,EAAU,YAAc,QAMlD,SAASE,EAAazB,GACpB,IAAM2B,EAAkB3B,EAAM0B,iBAAmB,CAACC,gBAAiB,OAAS,KAC5E,OACE1B,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEwB,SAAS,IACTC,MAAOF,EACPnB,QAASR,EAAMQ,SACdR,EAAMc,OAAOH,MAKpB,SAASmB,EAAY9B,GACnB,OACEC,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAK2B,MAAO,KACV9B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACE4B,EAAG,EACHC,aAAc,EACdC,UAAU,+BACTlC,EAAMmC,eAMTC,cACJ,SAAAA,EAAYpC,GAAO,IAAAqC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxC,KACD4C,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAKU,cAAgBV,EAAKU,cAAcF,KAAnBP,OAAAQ,EAAA,EAAAR,CAAAD,IACrBA,EAAKW,MAAQ,CACXxB,QAASyB,IACTC,OAAQ,WANOb,0EAURf,GACT,OAAOkB,KAAKxC,MAAMY,UAAUF,gBAAgBY,GAAGP,gDAI/CyB,KAAKxC,MAAMmD,oBACXX,KAAKY,SAAS,SAAAJ,GACZ,MAAO,CACLE,OAAQ,UACR1B,QAASyB,2CAKH3B,GAAG,IAAA+B,EAAAb,KACbA,KAAKY,SAAS,SAAAJ,GAGZ,OAFAA,EAAMxB,QAAQF,GAAK,UACnB0B,EAAME,OAASG,EAAKC,WAAWhC,GAAK,UAAY0B,EAAME,OAC/CF,qCAKT,IAAIO,EAEJ,OAAQf,KAAKQ,MAAME,QACjB,IAAK,UACHK,EAAatD,EAAAC,EAAAC,cAACgB,EAAD,CACXC,KAAMoB,KAAKxC,MAAMY,UACjBJ,QAASgC,KAAKI,YACdpB,QAASgB,KAAKQ,MAAMxB,UAEtB,MAEF,IAAK,UACH+B,EAAatD,EAAAC,EAAAC,cAACM,EAAD,CACXG,UAAW4B,KAAKxC,MAAMY,UACtBM,WAAYsB,KAAKxC,MAAMkB,WACvBV,QAASgC,KAAKO,gBAEhB,MAEF,QACEQ,EAAatD,EAAAC,EAAAC,cAACJ,EAAD,CAAaS,QAASgC,KAAKO,gBAI5C,OACE9C,EAAAC,EAAAC,cAAC2B,EAAD,KACGyB,UA5DUC,IAAMC,WAgGzB,SAASR,IACP,OAAOS,MAAM,GAAGC,KAAK,MAwCRC,kBAtEb,SAAAA,EAAY5D,GAAO,IAAA6D,EAAA,OAAAvB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,IACjBC,EAAAvB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAjB,KAAAH,KAAMxC,KACD8D,wBAA0BD,EAAKC,wBAAwBjB,KAA7BP,OAAAQ,EAAA,EAAAR,CAAAuB,IAC/BA,EAAKb,MAAQ,CACXe,YAAaC,IACb9C,YAAY,GALG2C,yFAUjBrB,KAAKY,SAAS,SAAAJ,GACZ,MAAO,CACLe,YAAaE,MAAMjB,EAAMe,aAAe,EAAIf,EAAMe,YAAc,EAChE7C,WA4BQ,CACV,CACEF,MAAO,sBACPN,gBAAiB,CACf,CAACC,KAAM,yBAA0BI,SAAS,GAC1C,CAACJ,KAAM,sBAAuBI,SAAS,GACvC,CAACJ,KAAM,iBAAkBI,SAAS,KAGtC,CACEC,MAAO,sBACPN,gBAAiB,CACf,CAACC,KAAM,oBAAqBI,SAAS,GACrC,CAACJ,KAAM,iBAAkBI,SAAS,GAClC,CAACJ,KAAM,sBAAuBI,SAAS,KAG3C,CACEC,MAAO,sBACPN,gBAAiB,CACf,CAACC,KAAM,sBAAuBI,SAAS,GACvC,CAACJ,KAAM,uBAAwBI,SAAS,GACxC,CAACJ,KAAM,mBAAoBI,SAAS,MAlDJmD,OAAS,IAAOlB,EAAMe,gDAM5D,OACE9D,EAAAC,EAAAC,cAACgE,EAAD,CACEvD,UAoBQ,CACV,CACEI,MAAO,sBACPN,gBAAiB,CACf,CAACC,KAAM,yBAA0BI,SAAS,GAC1C,CAACJ,KAAM,sBAAuBI,SAAS,GACvC,CAACJ,KAAM,iBAAkBI,SAAS,KAGtC,CACEC,MAAO,sBACPN,gBAAiB,CACf,CAACC,KAAM,oBAAqBI,SAAS,GACrC,CAACJ,KAAM,iBAAkBI,SAAS,GAClC,CAACJ,KAAM,sBAAuBI,SAAS,KAG3C,CACEC,MAAO,sBACPN,gBAAiB,CACf,CAACC,KAAM,sBAAuBI,SAAS,GACvC,CAACJ,KAAM,uBAAwBI,SAAS,GACxC,CAACJ,KAAM,mBAAoBI,SAAS,MA1CNyB,KAAKQ,MAAMe,aAC3CZ,kBAAmBX,KAAKsB,wBACxB5C,WAAYsB,KAAKQ,MAAM9B,oBAxBbsC,IAAMC,WC/IJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3d5268f8.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  Image,\n  Heading,\n  Text,\n} from 'rebass';\n\nfunction NewGameCard(props) {\n  return (\n    <Box px={3}>\n      <Image src= {process.env.PUBLIC_URL + '/fadedSquare.png'} />\n      <Button onClick={() => props.onClick()}>Begin</Button>\n    </Box>\n  );\n}\n\nfunction WinningCard(props) {\n  const name = findAnswer(props.flashcard.multipleChoices).name;\n\n  const action = () => {\n    if (props.isLastCard) {\n      return <p>You guessed X out of X</p>;\n    } else {\n      return <Button onClick={() => props.onClick()}>Next</Button>;\n    }\n  };\n\n  return (\n    <Box px={3}>\n      <Image src={props.flashcard.image} />\n      <Heading as='h3'>Correct!</Heading>\n      <Text>\n        <p>Yes, the answer is <strong>{name}</strong></p>\n      </Text>\n      {action()}\n    </Box>\n  );\n}\n\nfunction FlashCard(props) {\n  return (\n    <Box px={3}>\n      <Image src={props.card.image} />\n      <div>{renderChoice(0)}</div>\n      <div>{renderChoice(1)}</div>\n      <div>{renderChoice(2)}</div>\n    </Box>\n  );\n\n  function renderChoice(i) {\n    const guessed = props.guesses[i];\n    return (\n      <ChoiceButton\n        choice={props.card.multipleChoices[i]}\n        onClick={() => props.onClick(i)}\n        guessIsIncorrect={guessed ? 'incorrect' : null}\n      />\n    );\n  }\n}\n\nfunction ChoiceButton(props) {\n  const backgroundColor = props.guessIsIncorrect ? {backgroundColor: 'red'} : null;\n  return (\n    <Button\n      fontSize='2'\n      style={backgroundColor}\n      onClick={props.onClick} >\n      {props.choice.name}\n    </Button>\n  );\n}\n\nfunction GameWrapper(props) {\n  return (\n    <Box width={450}>\n      <Card\n        p={1}\n        borderRadius={2}\n        boxShadow='0 0 16px rgba(0, 0, 0, .25)'>\n        {props.children}\n      </Card>\n    </Box>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleGuess = this.handleGuess.bind(this);\n    this.handleNewCard = this.handleNewCard.bind(this);\n    this.state = {\n      guesses: resetGuesses(),\n      action: 'newGame',\n    };\n  }\n\n  _isWinning(i) {\n    return this.props.flashcard.multipleChoices[i].correct;\n  }\n\n  handleNewCard() {\n    this.props.advanceToNextCard();\n    this.setState(state => {\n      return {\n        action: 'playing',\n        guesses: resetGuesses(),\n      };\n    });\n  }\n\n  handleGuess(i) {\n    this.setState(state => {\n      state.guesses[i] = 'guessed';\n      state.action = this._isWinning(i) ? 'winning' : state.action;\n      return state;\n    });\n  }\n\n  render() {\n    let gameScreen;\n\n    switch (this.state.action) {\n      case 'playing':\n        gameScreen = <FlashCard\n          card={this.props.flashcard}\n          onClick={this.handleGuess}\n          guesses={this.state.guesses}\n        />\n        break;\n\n      case 'winning':\n        gameScreen = <WinningCard\n          flashcard={this.props.flashcard}\n          isLastCard={this.props.isLastCard}\n          onClick={this.handleNewCard}\n        />;\n        break;\n\n      default:\n        gameScreen = <NewGameCard onClick={this.handleNewCard} />\n        break;\n    }\n\n    return (\n      <GameWrapper>\n        {gameScreen}\n      </GameWrapper>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleAdvanceToNextCard = this.handleAdvanceToNextCard.bind(this);\n    this.state = {\n      currentCard: NaN,\n      isLastCard: false,\n    };\n  }\n\n  handleAdvanceToNextCard() {\n    this.setState(state => {\n      return {\n        currentCard: isNaN(state.currentCard) ? 0 : state.currentCard + 1,\n        isLastCard: (apiData().flashcards.length - 2) === state.currentCard,\n      };\n    });\n  }\n\n  render() {\n    return (\n      <Game\n        flashcard={apiData().flashcards[this.state.currentCard]}\n        advanceToNextCard={this.handleAdvanceToNextCard}\n        isLastCard={this.state.isLastCard}\n      />\n    );\n  }\n}\n\nfunction resetGuesses() {\n  return Array(3).fill(null);\n}\n\nfunction findAnswer(multipleChoices) {\n  return multipleChoices.find(choice => {\n    return choice.correct;\n  });\n}\n\nfunction apiData() {\n  return {\n    flashcards: [\n      {\n        image: '/cards/IMG_8587.jpg',\n        multipleChoices: [\n          {name: 'Dodecatheon pilchellum', correct: false},\n          {name: 'Trametes versicolor', correct: true},\n          {name: 'Gavia pacifica', correct: false},\n        ],\n      },\n      {\n        image: '/cards/IMG_8607.jpg',\n        multipleChoices: [\n          {name: 'Gaulteria Shallon', correct: true},\n          {name: 'Boletus edulis', correct: false},\n          {name: 'Morchella esculenta', correct: false},\n        ],\n      },\n      {\n        image: '/cards/IMG_8625.jpg',\n        multipleChoices: [\n          {name: 'Agaricus campestris', correct: false},\n          {name: 'Ganoderma applanatum', correct: false},\n          {name: 'Dicentra formosa', correct: true},\n        ],\n      },\n    ],\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}