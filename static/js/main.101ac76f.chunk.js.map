{"version":3,"sources":["FlashCard.js","Game.js","serviceWorker.js","index.js"],"names":["rNumber","max","Math","floor","random","FlashCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","correctIndex","guessed","Array","fill","gameState","i","hasGuesses","find","setState","addPoint","advanceToNextCard","_this2","_this$state","options","multipleChoices","react_default","a","createElement","src","image","alt","style","backgroundColor","onClick","handleOnClick","taxonName","score","onClickNext","React","Component","Game","handleAdvanceToNextCard","bind","assertThisInitialized","handleAddPoint","startSliceAt","points","concat","datafile","slice","src_FlashCard","Boolean","window","location","hostname","match","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.101ac76f.chunk.js","sourcesContent":["import React from 'react';\n\nconst rNumber = (max) => Math.floor(Math.random() * Math.floor(max));\n\nclass FlashCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      correctIndex: rNumber(3),\n      guessed: Array(3).fill(false),\n      gameState: 'playing',\n    }\n  }\n\n  handleOnClick(i) {\n    if (i === this.state.correctIndex) {\n      const hasGuesses = this.state.guessed.find(i => {\n        return i === true;\n      });\n      this.setState(state => {\n        return {\n          gameState: 'next'\n        };\n      });\n      this.props.addPoint(hasGuesses)\n    } else {\n      this.setState(state => {\n        return state.guessed[i] = true;\n      });\n    }\n  }\n\n  onClickNext() {\n    this.setState(state => {\n      return {\n        correctIndex: rNumber(3),\n        guessed: Array(3).fill(false),\n        gameState: 'playing'\n      };\n    });\n\n    this.props.advanceToNextCard();\n  }\n\n  render() {\n    const { guessed, correctIndex, gameState } = this.state;\n    const options = this.props.multipleChoices;\n\n    switch (gameState) {\n      case 'playing':\n        return (\n          <div>\n            <p><img src={options[correctIndex].image + '?width=500'} alt='What is this mushroom?' /></p>\n            <button style={guessed[0] ? { backgroundColor: 'red' } : null} onClick={() => this.handleOnClick(0)}>{options[0].taxonName}</button>\n            <button style={guessed[1] ? { backgroundColor: 'red' } : null} onClick={() => this.handleOnClick(1)}>{options[1].taxonName}</button>\n            <button style={guessed[2] ? { backgroundColor: 'red' } : null} onClick={() => this.handleOnClick(2)}>{options[2].taxonName}</button>\n          </div>\n        );\n      case 'next':\n        return (\n          <div>\n            <p><img src={options[correctIndex].image + '?width=500'} alt='What is this mushroom?' /></p>\n            <p>Score: {this.props.score}</p>\n            <p>Yep, the answer is {options[correctIndex].taxonName}.</p>\n            <p><button onClick={() => this.onClickNext()} >Next</button></p>\n          </div>\n        );\n      default:\n        break;\n    }\n  }\n}\n\nexport default FlashCard;","import React from 'react';\nimport FlashCard from './FlashCard';\nimport datafile from './data.json';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleAdvanceToNextCard = this.handleAdvanceToNextCard.bind(this);\n    this.handleAddPoint = this.handleAddPoint.bind(this);\n    this.state = {\n      startSliceAt: 0,\n      points: 0,\n    }\n  }\n\n  handleAdvanceToNextCard() {\n    this.setState(state => {\n      return {\n        startSliceAt: state.startSliceAt + 3,\n      };\n    });\n  }\n\n  handleAddPoint(hasGuesses) {\n    this.setState(state => {\n      return {\n        points: hasGuesses ? state.points : (state.points + 1),\n      };\n    });\n  }\n\n  render() {\n    const { startSliceAt, points } = this.state;\n    const score = `${points} / ${(startSliceAt / 3) + 1}`;\n\n    const multipleChoices = datafile.slice(startSliceAt, startSliceAt + 3);\n\n    return (\n      <div>\n        <FlashCard\n          multipleChoices={multipleChoices}\n          startSliceAt={startSliceAt}\n          advanceToNextCard={this.handleAdvanceToNextCard}\n          addPoint={this.handleAddPoint}\n          score={score}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}