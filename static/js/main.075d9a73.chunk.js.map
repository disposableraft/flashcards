{"version":3,"sources":["FlashCard.js","Game.js","serviceWorker.js","index.js"],"names":["FlashCard","props","advanceToNextCard","correctIndex","gameState","guessed","makeAGuess","multipleChoices","backgroundImage","background","concat","image","width","height","react_default","a","createElement","style","backgroundColor","onClick","taxonName","score","target","rel","href","item","rNumber","max","Math","floor","random","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAdvanceToNextCard","bind","assertThisInitialized","handleMakeAGuess","state","startSliceAt","points","Array","fill","find","i","index","addPoint","setState","boolean","haveTheyGuessed","datafile","slice","src_FlashCard","assign","calculateScore","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.075d9a73.chunk.js","sourcesContent":["import React from 'react';\n\nfunction FlashCard(props) {\n  const {\n    advanceToNextCard,\n    correctIndex,\n    gameState,\n    guessed,\n    makeAGuess,\n    multipleChoices,\n  } = props;\n\n  const backgroundImage = {\n    background: `center / contain url(${multipleChoices[correctIndex].image}?width=500)`,\n    width: '500px',\n    height: '500px',\n  };\n\n  switch (gameState) {\n    case 'playing':\n      return (\n        <div>\n          <div style={backgroundImage} />\n          <button style={guessed[0] ? { backgroundColor: 'red' } : null} onClick={() => makeAGuess(0)}>{multipleChoices[0].taxonName}</button>\n          <button style={guessed[1] ? { backgroundColor: 'red' } : null} onClick={() => makeAGuess(1)}>{multipleChoices[1].taxonName}</button>\n          <button style={guessed[2] ? { backgroundColor: 'red' } : null} onClick={() => makeAGuess(2)}>{multipleChoices[2].taxonName}</button>\n        </div>\n      );\n    case 'next':\n      return (\n        <div>\n          <div style={backgroundImage} />\n          <p>Score: {props.score}</p>\n          <p>Yep, the answer is <a target=\"_blank\" rel=\"noopener noreferrer\" href={multipleChoices[correctIndex].item}>{multipleChoices[correctIndex].taxonName}</a>.</p>\n          <p><button onClick={() => advanceToNextCard()} >Next</button></p>\n        </div>\n      );\n    default:\n      break;\n  }\n}\n\nexport default FlashCard;","import React from 'react';\nimport FlashCard from './FlashCard';\nimport datafile from './data.json';\n\nconst rNumber = (max) => Math.floor(Math.random() * Math.floor(max));\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleAdvanceToNextCard = this.handleAdvanceToNextCard.bind(this);\n    this.handleMakeAGuess = this.handleMakeAGuess.bind(this);\n    this.state = {\n      correctIndex: rNumber(3),\n      startSliceAt: 0,\n      points: 0,\n      gameState: 'playing',\n      guessed: Array(3).fill(false),\n    }\n  }\n\n  haveTheyGuessed() {\n    return this.state.guessed.find(i => {\n      return i === true;\n    });\n  }\n\n  handleMakeAGuess(index) {\n    const winningAnswer = index === this.state.correctIndex;\n    if (winningAnswer) {\n      this.addPoint();\n    } else {\n      this.setState(state => {\n        return state.guessed[index] = true;\n      });\n    }\n  }\n\n  handleAdvanceToNextCard() {\n    this.setState(state => {\n      return {\n        startSliceAt: state.startSliceAt + 3,\n        correctIndex: rNumber(3),\n        gameState: 'playing',\n        guessed: Array(3).fill(false),\n      };\n    });\n  }\n\n  addPoint() {\n    const boolean = this.haveTheyGuessed()\n    this.setState(state => {\n      return {\n        gameState: 'next',\n        points: boolean ? state.points : (state.points + 1),\n      };\n    });\n  }\n\n  calculateScore() {\n    return `${this.state.points} / ${(this.state.startSliceAt / 3) + 1}`;\n  }\n\n  render() {\n    const { startSliceAt } = this.state;\n\n    const multipleChoices = datafile.slice(startSliceAt, startSliceAt + 3);\n\n    return (\n      <div>\n        <FlashCard\n          advanceToNextCard={this.handleAdvanceToNextCard}\n          makeAGuess={this.handleMakeAGuess}\n          multipleChoices={multipleChoices}\n          score={this.calculateScore()}\n          {...this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}